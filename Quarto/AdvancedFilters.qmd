---
title: "Advanced Filter Exercises"
format: 
  html:
    theme: default #litera, pulse, cosmo, sketchy
---


Video [here](https://www.youtube.com/watch?v=w5veSzXK1jw)

```{r}
#| message: false
#| warning: false
library(tidyverse)
```

## Required packages and datasets

Run the code in the code chunk below to load the dataset `happy_full`.

```{r}
# install.packages("remotes")
# remotes::install_github("matthewhirschey/tidybiology", force = TRUE)
# can also use devtools::install_github() since devtools is installed in
# system library
library(tidybiology)
data(happy_full)
happy_full |> 
  DT::datatable()
```

1. Choose countries that are NOT in Europe i.e. countries that have a `region` entry that is NOT equal to either `"Western Europe"` or `"Central and Eastern Europe"`.

```{r}
happy_full |>
  filter(!region %in% c("Western Europe", "Central and Eastern Europe")) -> ans1
ggplot(ans1, aes(x = region)) +
  geom_bar(fill = "darkgreen", color = "black") +
  coord_flip() +
  theme_classic()
```

2. Choose countries that do NOT (have an above average `healthy_life_expectancy` or above average `generosity` score).

```{r}
happy_full |>
  filter(!(
    healthy_life_expectancy > mean(healthy_life_expectancy) |
      generosity > mean(generosity)
  )) -> ans3
dim(ans3)
# This is the same as
happy_full |>
  filter((
    healthy_life_expectancy <= mean(healthy_life_expectancy) &
      generosity <= mean(generosity)
  )) -> ans4
dim(ans4)

```

3. Choose countries that are either in Europe of have a `ladder_score` above 7, and have a `healthy_life_expectancy` above 70.

```{r}
happy_full |>
  filter((
    region %in% c("Western Europe", "Central and Eastern Europe") |
      ladder_score > 7
  ) & healthy_life_expectancy > 70) -> ans5
ans5 |>
  relocate(region, ladder_score, healthy_life_expectancy) |>
  DT::datatable()
# Note this is not the same as:
happy_full |>
  filter(
    healthy_life_expectancy > 70 &
      ladder_score > 7 |
      region %in% c("Western Europe", "Central and Eastern Europe")
  ) -> ans6
ans6 |>
  relocate(region, ladder_score, healthy_life_expectancy) |>
  DT::datatable()
```

4. Choose countries that have a `generosity` score that is between the median and mean `generosity` scores (inclusive) across all countries.

```{r}
happy_full |>
  summarize(MD = median(generosity),
            ME = mean(generosity))
# Note: Median < Mean
happy_full |>
  filter(between(generosity, median(generosity), mean(generosity))) -> ans7
dim(ans7)
# Check
ans7 |>
  reframe(R = range(generosity))
# Another solution
happy_full |>
  filter(generosity >= median(generosity),
         generosity <= mean(generosity)) -> ans8
dim(ans8)
```

5.  Choose countries whose `ladder_score` is equal to the mean `ladder_score` $\pm$ the standard error (SE = $s/\sqrt{n}$) of `ladder_score` across all countries. 

```{r}
happy_full |>
  summarize(xbar = mean(ladder_score),
            SE = sd(ladder_score) / sqrt(length(ladder_score))) -> ans8
ans8
# Using between() with filter
happy_full |>
  filter(between(
    ladder_score,
    mean(ladder_score) - sd(ladder_score) / sqrt(nrow(happy_full)),
    mean(ladder_score) + sd(ladder_score) / sqrt(nrow(happy_full))
  )) -> ans9
dim(ans9)
# Using logical operators with filter
happy_full |>
  filter(
    ladder_score >= mean(ladder_score) - sd(ladder_score) / sqrt(nrow(happy_full)) &
      ladder_score <= mean(ladder_score) + sd(ladder_score) / sqrt(nrow(happy_full))
  ) -> ans10
dim(ans10)
# Using near() with filter
happy_full |>
  filter(near(
    ladder_score,
    mean(ladder_score),
    tol = sd(ladder_score) / sqrt(nrow(happy_full))
  )) -> ans11
dim(ans11)
```

